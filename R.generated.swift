//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 17 storyboards.
  struct storyboard {
    /// Storyboard `AccountViewController`.
    static let accountViewController = _R.storyboard.accountViewController()
    /// Storyboard `AddProjectViewController`.
    static let addProjectViewController = _R.storyboard.addProjectViewController()
    /// Storyboard `ForgotPasswordViewController`.
    static let forgotPasswordViewController = _R.storyboard.forgotPasswordViewController()
    /// Storyboard `HomeViewController`.
    static let homeViewController = _R.storyboard.homeViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginViewController`.
    static let loginViewController = _R.storyboard.loginViewController()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MaterialListViewController`.
    static let materialListViewController = _R.storyboard.materialListViewController()
    /// Storyboard `MenuTabBarController`.
    static let menuTabBarController = _R.storyboard.menuTabBarController()
    /// Storyboard `MenuViewController`.
    static let menuViewController = _R.storyboard.menuViewController()
    /// Storyboard `PreviewViewController`.
    static let previewViewController = _R.storyboard.previewViewController()
    /// Storyboard `ProjectListViewController`.
    static let projectListViewController = _R.storyboard.projectListViewController()
    /// Storyboard `ResetPasswordViewController`.
    static let resetPasswordViewController = _R.storyboard.resetPasswordViewController()
    /// Storyboard `SignUpViewController`.
    static let signUpViewController = _R.storyboard.signUpViewController()
    /// Storyboard `SpaceARViewController`.
    static let spaceARViewController = _R.storyboard.spaceARViewController()
    /// Storyboard `StartViewController`.
    static let startViewController = _R.storyboard.startViewController()
    /// Storyboard `TermsViewController`.
    static let termsViewController = _R.storyboard.termsViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AccountViewController", bundle: ...)`
    static func accountViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddProjectViewController", bundle: ...)`
    static func addProjectViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addProjectViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ForgotPasswordViewController", bundle: ...)`
    static func forgotPasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgotPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeViewController", bundle: ...)`
    static func homeViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginViewController", bundle: ...)`
    static func loginViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MaterialListViewController", bundle: ...)`
    static func materialListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.materialListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MenuTabBarController", bundle: ...)`
    static func menuTabBarController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuTabBarController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MenuViewController", bundle: ...)`
    static func menuViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PreviewViewController", bundle: ...)`
    static func previewViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.previewViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProjectListViewController", bundle: ...)`
    static func projectListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.projectListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ResetPasswordViewController", bundle: ...)`
    static func resetPasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.resetPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignUpViewController", bundle: ...)`
    static func signUpViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUpViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SpaceARViewController", bundle: ...)`
    static func spaceARViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spaceARViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "StartViewController", bundle: ...)`
    static func startViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.startViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TermsViewController", bundle: ...)`
    static func termsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.termsViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 60 files.
  struct file {
    /// Resource file `BarlowCondensed-Black.ttf`.
    static let barlowCondensedBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Black", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-BlackItalic.ttf`.
    static let barlowCondensedBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-BlackItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-Bold.ttf`.
    static let barlowCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Bold", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-BoldItalic.ttf`.
    static let barlowCondensedBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-BoldItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-ExtraBold.ttf`.
    static let barlowCondensedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-ExtraBold", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-ExtraBoldItalic.ttf`.
    static let barlowCondensedExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-ExtraLight.ttf`.
    static let barlowCondensedExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-ExtraLight", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-ExtraLightItalic.ttf`.
    static let barlowCondensedExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-Italic.ttf`.
    static let barlowCondensedItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Italic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-Light.ttf`.
    static let barlowCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Light", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-LightItalic.ttf`.
    static let barlowCondensedLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-LightItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-Medium.ttf`.
    static let barlowCondensedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Medium", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-MediumItalic.ttf`.
    static let barlowCondensedMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-MediumItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-Regular.ttf`.
    static let barlowCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Regular", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-SemiBold.ttf`.
    static let barlowCondensedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-SemiBold", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-SemiBoldItalic.ttf`.
    static let barlowCondensedSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-Thin.ttf`.
    static let barlowCondensedThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-Thin", pathExtension: "ttf")
    /// Resource file `BarlowCondensed-ThinItalic.ttf`.
    static let barlowCondensedThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "BarlowCondensed-ThinItalic", pathExtension: "ttf")
    /// Resource file `LICENSE.txt`.
    static let licenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "txt")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    /// Resource file `OpenSans-Bold.ttf`.
    static let openSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Bold", pathExtension: "ttf")
    /// Resource file `OpenSans-BoldItalic.ttf`.
    static let openSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBold.ttf`.
    static let openSansExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBold", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBoldItalic.ttf`.
    static let openSansExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Italic-VariableFont_wdth,wght.ttf`.
    static let openSansItalicVariableFont_wdthWghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Italic-VariableFont_wdth,wght", pathExtension: "ttf")
    /// Resource file `OpenSans-Italic.ttf`.
    static let openSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Italic", pathExtension: "ttf")
    /// Resource file `OpenSans-Light.ttf`.
    static let openSansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Light", pathExtension: "ttf")
    /// Resource file `OpenSans-LightItalic.ttf`.
    static let openSansLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-LightItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Medium.ttf`.
    static let openSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Medium", pathExtension: "ttf")
    /// Resource file `OpenSans-MediumItalic.ttf`.
    static let openSansMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-MediumItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Regular.ttf`.
    static let openSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiBold.ttf`.
    static let openSansSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiBold", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiBoldItalic.ttf`.
    static let openSansSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-VariableFont_wdth,wght.ttf`.
    static let openSansVariableFont_wdthWghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-VariableFont_wdth,wght", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-Bold.ttf`.
    static let openSans_CondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-Bold", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-BoldItalic.ttf`.
    static let openSans_CondensedBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-BoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-ExtraBold.ttf`.
    static let openSans_CondensedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-ExtraBold", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-ExtraBoldItalic.ttf`.
    static let openSans_CondensedExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-Italic.ttf`.
    static let openSans_CondensedItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-Italic", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-Light.ttf`.
    static let openSans_CondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-Light", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-LightItalic.ttf`.
    static let openSans_CondensedLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-LightItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-Medium.ttf`.
    static let openSans_CondensedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-Medium", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-MediumItalic.ttf`.
    static let openSans_CondensedMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-MediumItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-Regular.ttf`.
    static let openSans_CondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-SemiBold.ttf`.
    static let openSans_CondensedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-SemiBold", pathExtension: "ttf")
    /// Resource file `OpenSans_Condensed-SemiBoldItalic.ttf`.
    static let openSans_CondensedSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_Condensed-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-Bold.ttf`.
    static let openSans_SemiCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-Bold", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-BoldItalic.ttf`.
    static let openSans_SemiCondensedBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-BoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-ExtraBold.ttf`.
    static let openSans_SemiCondensedExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-ExtraBold", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-ExtraBoldItalic.ttf`.
    static let openSans_SemiCondensedExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-Italic.ttf`.
    static let openSans_SemiCondensedItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-Italic", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-Light.ttf`.
    static let openSans_SemiCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-Light", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-LightItalic.ttf`.
    static let openSans_SemiCondensedLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-LightItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-Medium.ttf`.
    static let openSans_SemiCondensedMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-Medium", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-MediumItalic.ttf`.
    static let openSans_SemiCondensedMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-MediumItalic", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-Regular.ttf`.
    static let openSans_SemiCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-SemiBold.ttf`.
    static let openSans_SemiCondensedSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-SemiBold", pathExtension: "ttf")
    /// Resource file `OpenSans_SemiCondensed-SemiBoldItalic.ttf`.
    static let openSans_SemiCondensedSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans_SemiCondensed-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `README.txt`.
    static let readmeTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "txt")
    /// Resource file `awsconfiguration.json`.
    static let awsconfigurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "awsconfiguration", pathExtension: "json")

    /// `bundle.url(forResource: "BarlowCondensed-Black", withExtension: "ttf")`
    static func barlowCondensedBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-BlackItalic", withExtension: "ttf")`
    static func barlowCondensedBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-Bold", withExtension: "ttf")`
    static func barlowCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-BoldItalic", withExtension: "ttf")`
    static func barlowCondensedBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-ExtraBold", withExtension: "ttf")`
    static func barlowCondensedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-ExtraBoldItalic", withExtension: "ttf")`
    static func barlowCondensedExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-ExtraLight", withExtension: "ttf")`
    static func barlowCondensedExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-ExtraLightItalic", withExtension: "ttf")`
    static func barlowCondensedExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-Italic", withExtension: "ttf")`
    static func barlowCondensedItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-Light", withExtension: "ttf")`
    static func barlowCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-LightItalic", withExtension: "ttf")`
    static func barlowCondensedLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-Medium", withExtension: "ttf")`
    static func barlowCondensedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-MediumItalic", withExtension: "ttf")`
    static func barlowCondensedMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-Regular", withExtension: "ttf")`
    static func barlowCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-SemiBold", withExtension: "ttf")`
    static func barlowCondensedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-SemiBoldItalic", withExtension: "ttf")`
    static func barlowCondensedSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-Thin", withExtension: "ttf")`
    static func barlowCondensedThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BarlowCondensed-ThinItalic", withExtension: "ttf")`
    static func barlowCondensedThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.barlowCondensedThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LICENSE", withExtension: "txt")`
    static func licenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Bold", withExtension: "ttf")`
    static func openSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-BoldItalic", withExtension: "ttf")`
    static func openSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBold", withExtension: "ttf")`
    static func openSansExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBoldItalic", withExtension: "ttf")`
    static func openSansExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Italic", withExtension: "ttf")`
    static func openSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Italic-VariableFont_wdth,wght", withExtension: "ttf")`
    static func openSansItalicVariableFont_wdthWghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansItalicVariableFont_wdthWghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Light", withExtension: "ttf")`
    static func openSansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-LightItalic", withExtension: "ttf")`
    static func openSansLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Medium", withExtension: "ttf")`
    static func openSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-MediumItalic", withExtension: "ttf")`
    static func openSansMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Regular", withExtension: "ttf")`
    static func openSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiBold", withExtension: "ttf")`
    static func openSansSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiBoldItalic", withExtension: "ttf")`
    static func openSansSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-VariableFont_wdth,wght", withExtension: "ttf")`
    static func openSansVariableFont_wdthWghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansVariableFont_wdthWghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-Bold", withExtension: "ttf")`
    static func openSans_CondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-BoldItalic", withExtension: "ttf")`
    static func openSans_CondensedBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-ExtraBold", withExtension: "ttf")`
    static func openSans_CondensedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-ExtraBoldItalic", withExtension: "ttf")`
    static func openSans_CondensedExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-Italic", withExtension: "ttf")`
    static func openSans_CondensedItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-Light", withExtension: "ttf")`
    static func openSans_CondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-LightItalic", withExtension: "ttf")`
    static func openSans_CondensedLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-Medium", withExtension: "ttf")`
    static func openSans_CondensedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-MediumItalic", withExtension: "ttf")`
    static func openSans_CondensedMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-Regular", withExtension: "ttf")`
    static func openSans_CondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-SemiBold", withExtension: "ttf")`
    static func openSans_CondensedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_Condensed-SemiBoldItalic", withExtension: "ttf")`
    static func openSans_CondensedSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_CondensedSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-Bold", withExtension: "ttf")`
    static func openSans_SemiCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-BoldItalic", withExtension: "ttf")`
    static func openSans_SemiCondensedBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-ExtraBold", withExtension: "ttf")`
    static func openSans_SemiCondensedExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-ExtraBoldItalic", withExtension: "ttf")`
    static func openSans_SemiCondensedExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-Italic", withExtension: "ttf")`
    static func openSans_SemiCondensedItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-Light", withExtension: "ttf")`
    static func openSans_SemiCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-LightItalic", withExtension: "ttf")`
    static func openSans_SemiCondensedLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-Medium", withExtension: "ttf")`
    static func openSans_SemiCondensedMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-MediumItalic", withExtension: "ttf")`
    static func openSans_SemiCondensedMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-Regular", withExtension: "ttf")`
    static func openSans_SemiCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-SemiBold", withExtension: "ttf")`
    static func openSans_SemiCondensedSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans_SemiCondensed-SemiBoldItalic", withExtension: "ttf")`
    static func openSans_SemiCondensedSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSans_SemiCondensedSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "txt")`
    static func readmeTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "awsconfiguration", withExtension: "json")`
    static func awsconfigurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awsconfigurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 56 fonts.
  struct font: Rswift.Validatable {
    /// Font `BarlowCondensed-BlackItalic`.
    static let barlowCondensedBlackItalic = Rswift.FontResource(fontName: "BarlowCondensed-BlackItalic")
    /// Font `BarlowCondensed-Black`.
    static let barlowCondensedBlack = Rswift.FontResource(fontName: "BarlowCondensed-Black")
    /// Font `BarlowCondensed-BoldItalic`.
    static let barlowCondensedBoldItalic = Rswift.FontResource(fontName: "BarlowCondensed-BoldItalic")
    /// Font `BarlowCondensed-Bold`.
    static let barlowCondensedBold = Rswift.FontResource(fontName: "BarlowCondensed-Bold")
    /// Font `BarlowCondensed-ExtraBoldItalic`.
    static let barlowCondensedExtraBoldItalic = Rswift.FontResource(fontName: "BarlowCondensed-ExtraBoldItalic")
    /// Font `BarlowCondensed-ExtraBold`.
    static let barlowCondensedExtraBold = Rswift.FontResource(fontName: "BarlowCondensed-ExtraBold")
    /// Font `BarlowCondensed-ExtraLightItalic`.
    static let barlowCondensedExtraLightItalic = Rswift.FontResource(fontName: "BarlowCondensed-ExtraLightItalic")
    /// Font `BarlowCondensed-ExtraLight`.
    static let barlowCondensedExtraLight = Rswift.FontResource(fontName: "BarlowCondensed-ExtraLight")
    /// Font `BarlowCondensed-Italic`.
    static let barlowCondensedItalic = Rswift.FontResource(fontName: "BarlowCondensed-Italic")
    /// Font `BarlowCondensed-LightItalic`.
    static let barlowCondensedLightItalic = Rswift.FontResource(fontName: "BarlowCondensed-LightItalic")
    /// Font `BarlowCondensed-Light`.
    static let barlowCondensedLight = Rswift.FontResource(fontName: "BarlowCondensed-Light")
    /// Font `BarlowCondensed-MediumItalic`.
    static let barlowCondensedMediumItalic = Rswift.FontResource(fontName: "BarlowCondensed-MediumItalic")
    /// Font `BarlowCondensed-Medium`.
    static let barlowCondensedMedium = Rswift.FontResource(fontName: "BarlowCondensed-Medium")
    /// Font `BarlowCondensed-Regular`.
    static let barlowCondensedRegular = Rswift.FontResource(fontName: "BarlowCondensed-Regular")
    /// Font `BarlowCondensed-SemiBoldItalic`.
    static let barlowCondensedSemiBoldItalic = Rswift.FontResource(fontName: "BarlowCondensed-SemiBoldItalic")
    /// Font `BarlowCondensed-SemiBold`.
    static let barlowCondensedSemiBold = Rswift.FontResource(fontName: "BarlowCondensed-SemiBold")
    /// Font `BarlowCondensed-ThinItalic`.
    static let barlowCondensedThinItalic = Rswift.FontResource(fontName: "BarlowCondensed-ThinItalic")
    /// Font `BarlowCondensed-Thin`.
    static let barlowCondensedThin = Rswift.FontResource(fontName: "BarlowCondensed-Thin")
    /// Font `OpenSans-BoldItalic`.
    static let openSansBoldItalic = Rswift.FontResource(fontName: "OpenSans-BoldItalic")
    /// Font `OpenSans-Bold`.
    static let openSansBold = Rswift.FontResource(fontName: "OpenSans-Bold")
    /// Font `OpenSans-ExtraBoldItalic`.
    static let openSansExtraBoldItalic = Rswift.FontResource(fontName: "OpenSans-ExtraBoldItalic")
    /// Font `OpenSans-ExtraBold`.
    static let openSansExtraBold = Rswift.FontResource(fontName: "OpenSans-ExtraBold")
    /// Font `OpenSans-LightItalic`.
    static let openSansLightItalic = Rswift.FontResource(fontName: "OpenSans-LightItalic")
    /// Font `OpenSans-Light`.
    static let openSansLight = Rswift.FontResource(fontName: "OpenSans-Light")
    /// Font `OpenSans-MediumItalic`.
    static let openSansMediumItalic = Rswift.FontResource(fontName: "OpenSans-MediumItalic")
    /// Font `OpenSans-Medium`.
    static let openSansMedium = Rswift.FontResource(fontName: "OpenSans-Medium")
    /// Font `OpenSans-SemiBoldItalic`.
    static let openSansSemiBoldItalic = Rswift.FontResource(fontName: "OpenSans-SemiBoldItalic")
    /// Font `OpenSans-SemiBold`.
    static let openSansSemiBold = Rswift.FontResource(fontName: "OpenSans-SemiBold")
    /// Font `OpenSansCondensed-BoldItalic`.
    static let openSansCondensedBoldItalic = Rswift.FontResource(fontName: "OpenSansCondensed-BoldItalic")
    /// Font `OpenSansCondensed-Bold`.
    static let openSansCondensedBold = Rswift.FontResource(fontName: "OpenSansCondensed-Bold")
    /// Font `OpenSansCondensed-ExtraBoldItalic`.
    static let openSansCondensedExtraBoldItalic = Rswift.FontResource(fontName: "OpenSansCondensed-ExtraBoldItalic")
    /// Font `OpenSansCondensed-ExtraBold`.
    static let openSansCondensedExtraBold = Rswift.FontResource(fontName: "OpenSansCondensed-ExtraBold")
    /// Font `OpenSansCondensed-Italic`.
    static let openSansCondensedItalic = Rswift.FontResource(fontName: "OpenSansCondensed-Italic")
    /// Font `OpenSansCondensed-LightItalic`.
    static let openSansCondensedLightItalic = Rswift.FontResource(fontName: "OpenSansCondensed-LightItalic")
    /// Font `OpenSansCondensed-Light`.
    static let openSansCondensedLight = Rswift.FontResource(fontName: "OpenSansCondensed-Light")
    /// Font `OpenSansCondensed-MediumItalic`.
    static let openSansCondensedMediumItalic = Rswift.FontResource(fontName: "OpenSansCondensed-MediumItalic")
    /// Font `OpenSansCondensed-Medium`.
    static let openSansCondensedMedium = Rswift.FontResource(fontName: "OpenSansCondensed-Medium")
    /// Font `OpenSansCondensed-Regular`.
    static let openSansCondensedRegular = Rswift.FontResource(fontName: "OpenSansCondensed-Regular")
    /// Font `OpenSansCondensed-SemiBoldItalic`.
    static let openSansCondensedSemiBoldItalic = Rswift.FontResource(fontName: "OpenSansCondensed-SemiBoldItalic")
    /// Font `OpenSansCondensed-SemiBold`.
    static let openSansCondensedSemiBold = Rswift.FontResource(fontName: "OpenSansCondensed-SemiBold")
    /// Font `OpenSansSemiCondensed-BoldItalic`.
    static let openSansSemiCondensedBoldItalic = Rswift.FontResource(fontName: "OpenSansSemiCondensed-BoldItalic")
    /// Font `OpenSansSemiCondensed-Bold`.
    static let openSansSemiCondensedBold = Rswift.FontResource(fontName: "OpenSansSemiCondensed-Bold")
    /// Font `OpenSansSemiCondensed-ExtraBoldItalic`.
    static let openSansSemiCondensedExtraBoldItalic = Rswift.FontResource(fontName: "OpenSansSemiCondensed-ExtraBoldItalic")
    /// Font `OpenSansSemiCondensed-ExtraBold`.
    static let openSansSemiCondensedExtraBold = Rswift.FontResource(fontName: "OpenSansSemiCondensed-ExtraBold")
    /// Font `OpenSansSemiCondensed-Italic`.
    static let openSansSemiCondensedItalic = Rswift.FontResource(fontName: "OpenSansSemiCondensed-Italic")
    /// Font `OpenSansSemiCondensed-LightItalic`.
    static let openSansSemiCondensedLightItalic = Rswift.FontResource(fontName: "OpenSansSemiCondensed-LightItalic")
    /// Font `OpenSansSemiCondensed-Light`.
    static let openSansSemiCondensedLight = Rswift.FontResource(fontName: "OpenSansSemiCondensed-Light")
    /// Font `OpenSansSemiCondensed-MediumItalic`.
    static let openSansSemiCondensedMediumItalic = Rswift.FontResource(fontName: "OpenSansSemiCondensed-MediumItalic")
    /// Font `OpenSansSemiCondensed-Medium`.
    static let openSansSemiCondensedMedium = Rswift.FontResource(fontName: "OpenSansSemiCondensed-Medium")
    /// Font `OpenSansSemiCondensed-Regular`.
    static let openSansSemiCondensedRegular = Rswift.FontResource(fontName: "OpenSansSemiCondensed-Regular")
    /// Font `OpenSansSemiCondensed-SemiBoldItalic`.
    static let openSansSemiCondensedSemiBoldItalic = Rswift.FontResource(fontName: "OpenSansSemiCondensed-SemiBoldItalic")
    /// Font `OpenSansSemiCondensed-SemiBold`.
    static let openSansSemiCondensedSemiBold = Rswift.FontResource(fontName: "OpenSansSemiCondensed-SemiBold")

    /// `UIFont(name: "BarlowCondensed-Black", size: ...)`
    static func barlowCondensedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedBlack, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-BlackItalic", size: ...)`
    static func barlowCondensedBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedBlackItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-Bold", size: ...)`
    static func barlowCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedBold, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-BoldItalic", size: ...)`
    static func barlowCondensedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedBoldItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-ExtraBold", size: ...)`
    static func barlowCondensedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedExtraBold, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-ExtraBoldItalic", size: ...)`
    static func barlowCondensedExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-ExtraLight", size: ...)`
    static func barlowCondensedExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedExtraLight, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-ExtraLightItalic", size: ...)`
    static func barlowCondensedExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedExtraLightItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-Italic", size: ...)`
    static func barlowCondensedItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-Light", size: ...)`
    static func barlowCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedLight, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-LightItalic", size: ...)`
    static func barlowCondensedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedLightItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-Medium", size: ...)`
    static func barlowCondensedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedMedium, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-MediumItalic", size: ...)`
    static func barlowCondensedMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedMediumItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-Regular", size: ...)`
    static func barlowCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedRegular, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-SemiBold", size: ...)`
    static func barlowCondensedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedSemiBold, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-SemiBoldItalic", size: ...)`
    static func barlowCondensedSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-Thin", size: ...)`
    static func barlowCondensedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedThin, size: size)
    }

    /// `UIFont(name: "BarlowCondensed-ThinItalic", size: ...)`
    static func barlowCondensedThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowCondensedThinItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Bold", size: ...)`
    static func openSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBold, size: size)
    }

    /// `UIFont(name: "OpenSans-BoldItalic", size: ...)`
    static func openSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraBold", size: ...)`
    static func openSansExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraBold, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraBoldItalic", size: ...)`
    static func openSansExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Light", size: ...)`
    static func openSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLight, size: size)
    }

    /// `UIFont(name: "OpenSans-LightItalic", size: ...)`
    static func openSansLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLightItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Medium", size: ...)`
    static func openSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansMedium, size: size)
    }

    /// `UIFont(name: "OpenSans-MediumItalic", size: ...)`
    static func openSansMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansMediumItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBold", size: ...)`
    static func openSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBold, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBoldItalic", size: ...)`
    static func openSansSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-Bold", size: ...)`
    static func openSansCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedBold, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-BoldItalic", size: ...)`
    static func openSansCondensedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-ExtraBold", size: ...)`
    static func openSansCondensedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedExtraBold, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-ExtraBoldItalic", size: ...)`
    static func openSansCondensedExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-Italic", size: ...)`
    static func openSansCondensedItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedItalic, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-Light", size: ...)`
    static func openSansCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedLight, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-LightItalic", size: ...)`
    static func openSansCondensedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedLightItalic, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-Medium", size: ...)`
    static func openSansCondensedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedMedium, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-MediumItalic", size: ...)`
    static func openSansCondensedMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedMediumItalic, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-Regular", size: ...)`
    static func openSansCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedRegular, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-SemiBold", size: ...)`
    static func openSansCondensedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedSemiBold, size: size)
    }

    /// `UIFont(name: "OpenSansCondensed-SemiBoldItalic", size: ...)`
    static func openSansCondensedSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansCondensedSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-Bold", size: ...)`
    static func openSansSemiCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedBold, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-BoldItalic", size: ...)`
    static func openSansSemiCondensedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-ExtraBold", size: ...)`
    static func openSansSemiCondensedExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedExtraBold, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-ExtraBoldItalic", size: ...)`
    static func openSansSemiCondensedExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-Italic", size: ...)`
    static func openSansSemiCondensedItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedItalic, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-Light", size: ...)`
    static func openSansSemiCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedLight, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-LightItalic", size: ...)`
    static func openSansSemiCondensedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedLightItalic, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-Medium", size: ...)`
    static func openSansSemiCondensedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedMedium, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-MediumItalic", size: ...)`
    static func openSansSemiCondensedMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedMediumItalic, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-Regular", size: ...)`
    static func openSansSemiCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedRegular, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-SemiBold", size: ...)`
    static func openSansSemiCondensedSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedSemiBold, size: size)
    }

    /// `UIFont(name: "OpenSansSemiCondensed-SemiBoldItalic", size: ...)`
    static func openSansSemiCondensedSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiCondensedSemiBoldItalic, size: size)
    }

    static func validate() throws {
      if R.font.barlowCondensedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Black' could not be loaded, is 'BarlowCondensed-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-BlackItalic' could not be loaded, is 'BarlowCondensed-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Bold' could not be loaded, is 'BarlowCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-BoldItalic' could not be loaded, is 'BarlowCondensed-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-ExtraBold' could not be loaded, is 'BarlowCondensed-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-ExtraBoldItalic' could not be loaded, is 'BarlowCondensed-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-ExtraLight' could not be loaded, is 'BarlowCondensed-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-ExtraLightItalic' could not be loaded, is 'BarlowCondensed-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Italic' could not be loaded, is 'BarlowCondensed-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Light' could not be loaded, is 'BarlowCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-LightItalic' could not be loaded, is 'BarlowCondensed-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Medium' could not be loaded, is 'BarlowCondensed-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-MediumItalic' could not be loaded, is 'BarlowCondensed-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Regular' could not be loaded, is 'BarlowCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-SemiBold' could not be loaded, is 'BarlowCondensed-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-SemiBoldItalic' could not be loaded, is 'BarlowCondensed-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-Thin' could not be loaded, is 'BarlowCondensed-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowCondensedThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'BarlowCondensed-ThinItalic' could not be loaded, is 'BarlowCondensed-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Bold' could not be loaded, is 'OpenSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-BoldItalic' could not be loaded, is 'OpenSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraBold' could not be loaded, is 'OpenSans-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraBoldItalic' could not be loaded, is 'OpenSans-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Light' could not be loaded, is 'OpenSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-LightItalic' could not be loaded, is 'OpenSans-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Medium' could not be loaded, is 'OpenSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-MediumItalic' could not be loaded, is 'OpenSans-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBold' could not be loaded, is 'OpenSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBoldItalic' could not be loaded, is 'OpenSans-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-Bold' could not be loaded, is 'OpenSans_Condensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-BoldItalic' could not be loaded, is 'OpenSans_Condensed-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-ExtraBold' could not be loaded, is 'OpenSans_Condensed-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-ExtraBoldItalic' could not be loaded, is 'OpenSans_Condensed-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-Italic' could not be loaded, is 'OpenSans_Condensed-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-Light' could not be loaded, is 'OpenSans_Condensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-LightItalic' could not be loaded, is 'OpenSans_Condensed-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-Medium' could not be loaded, is 'OpenSans_Condensed-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-MediumItalic' could not be loaded, is 'OpenSans_Condensed-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-Regular' could not be loaded, is 'OpenSans_Condensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-SemiBold' could not be loaded, is 'OpenSans_Condensed-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansCondensedSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansCondensed-SemiBoldItalic' could not be loaded, is 'OpenSans_Condensed-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-Bold' could not be loaded, is 'OpenSans_SemiCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-BoldItalic' could not be loaded, is 'OpenSans_SemiCondensed-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-ExtraBold' could not be loaded, is 'OpenSans_SemiCondensed-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-ExtraBoldItalic' could not be loaded, is 'OpenSans_SemiCondensed-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-Italic' could not be loaded, is 'OpenSans_SemiCondensed-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-Light' could not be loaded, is 'OpenSans_SemiCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-LightItalic' could not be loaded, is 'OpenSans_SemiCondensed-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-Medium' could not be loaded, is 'OpenSans_SemiCondensed-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-MediumItalic' could not be loaded, is 'OpenSans_SemiCondensed-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-Regular' could not be loaded, is 'OpenSans_SemiCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-SemiBold' could not be loaded, is 'OpenSans_SemiCondensed-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiCondensedSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSansSemiCondensed-SemiBoldItalic' could not be loaded, is 'OpenSans_SemiCondensed-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 66 images.
  struct image {
    /// Image `AR-Cancel-Scan`.
    static let arCancelScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Cancel-Scan")
    /// Image `AR-Close-Modal`.
    static let arCloseModal = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Close-Modal")
    /// Image `AR-Grout-Minus`.
    static let arGroutMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Grout-Minus")
    /// Image `AR-Grout-Plus`.
    static let arGroutPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Grout-Plus")
    /// Image `AR-Scan-Barcode`.
    static let arScanBarcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Scan-Barcode")
    /// Image `AR-Scan`.
    static let arScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Scan")
    /// Image `AR-Search-Grey`.
    static let arSearchGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Search-Grey")
    /// Image `AR-Style-Close-Menu`.
    static let arStyleCloseMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Style-Close-Menu")
    /// Image `AR-Style-Grout`.
    static let arStyleGrout = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Style-Grout")
    /// Image `AR-Style-Layout`.
    static let arStyleLayout = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Style-Layout")
    /// Image `AR-Style-Materials`.
    static let arStyleMaterials = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Style-Materials")
    /// Image `AR-Style-Menu`.
    static let arStyleMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR-Style-Menu")
    /// Image `Account-Active`.
    static let accountActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Account-Active")
    /// Image `Account`.
    static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "Account")
    /// Image `Add-Material-Space-ProjectDetailScreen`.
    static let addMaterialSpaceProjectDetailScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add-Material-Space-ProjectDetailScreen")
    /// Image `Add-Note-Orange`.
    static let addNoteOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add-Note-Orange")
    /// Image `Apple-Icon`.
    static let appleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Apple-Icon")
    /// Image `Back-Arrow-Green`.
    static let backArrowGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back-Arrow-Green")
    /// Image `Basket-Weave`.
    static let basketWeave = Rswift.ImageResource(bundle: R.hostingBundle, name: "Basket-Weave")
    /// Image `Brick-90-Degree`.
    static let brick90Degree = Rswift.ImageResource(bundle: R.hostingBundle, name: "Brick-90-Degree")
    /// Image `Cross-Hatch`.
    static let crossHatch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cross-Hatch")
    /// Image `Example-House-1`.
    static let exampleHouse1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Example-House-1")
    /// Image `Example-House-2`.
    static let exampleHouse2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Example-House-2")
    /// Image `Facebook-Icon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facebook-Icon")
    /// Image `Favorite-Not-Selected-Large`.
    static let favoriteNotSelectedLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite-Not-Selected-Large")
    /// Image `Favorite-Not-Selected-Small`.
    static let favoriteNotSelectedSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite-Not-Selected-Small")
    /// Image `Favorite-Selected-Large`.
    static let favoriteSelectedLarge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite-Selected-Large")
    /// Image `Favorite-Selected-Small`.
    static let favoriteSelectedSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite-Selected-Small")
    /// Image `Google-Icon`.
    static let googleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Google-Icon")
    /// Image `Green-Check-Mark`.
    static let greenCheckMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Green-Check-Mark")
    /// Image `Grey-Close`.
    static let greyClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "Grey-Close")
    /// Image `Grey-Point-Down-Arrow`.
    static let greyPointDownArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Grey-Point-Down-Arrow")
    /// Image `Grey-Point-Right-Arrow`.
    static let greyPointRightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Grey-Point-Right-Arrow")
    /// Image `Hamburger-Menu`.
    static let hamburgerMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Hamburger-Menu")
    /// Image `Hand-DIY`.
    static let handDIY = Rswift.ImageResource(bundle: R.hostingBundle, name: "Hand-DIY")
    /// Image `Hat-Contractor-Pro`.
    static let hatContractorPro = Rswift.ImageResource(bundle: R.hostingBundle, name: "Hat-Contractor-Pro")
    /// Image `Herring-Bone-90-Degree`.
    static let herringBone90Degree = Rswift.ImageResource(bundle: R.hostingBundle, name: "Herring-Bone-90-Degree")
    /// Image `Herring-Bone`.
    static let herringBone = Rswift.ImageResource(bundle: R.hostingBundle, name: "Herring-Bone")
    /// Image `Hide-Password`.
    static let hidePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "Hide-Password")
    /// Image `Home-Active`.
    static let homeActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home-Active")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `Materials-Active`.
    static let materialsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Materials-Active")
    /// Image `Materials`.
    static let materials = Rswift.ImageResource(bundle: R.hostingBundle, name: "Materials")
    /// Image `Minus-Orange`.
    static let minusOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Minus-Orange")
    /// Image `More-Detail-Screens`.
    static let moreDetailScreens = Rswift.ImageResource(bundle: R.hostingBundle, name: "More-Detail-Screens")
    /// Image `More-Home`.
    static let moreHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "More-Home")
    /// Image `Orange-Plus-Home`.
    static let orangePlusHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "Orange-Plus-Home")
    /// Image `Orange-Plus-Project-Screen`.
    static let orangePlusProjectScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Orange-Plus-Project-Screen")
    /// Image `Order-Button-Shopping-Cart`.
    static let orderButtonShoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Order-Button-Shopping-Cart")
    /// Image `Plus-Orange`.
    static let plusOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus-Orange")
    /// Image `Projects-Active`.
    static let projectsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Projects-Active")
    /// Image `Projects`.
    static let projects = Rswift.ImageResource(bundle: R.hostingBundle, name: "Projects")
    /// Image `Running-Board`.
    static let runningBoard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Running-Board")
    /// Image `Scan-Home`.
    static let scanHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "Scan-Home")
    /// Image `Shopping-Cart`.
    static let shoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shopping-Cart")
    /// Image `Show-Password`.
    static let showPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "Show-Password")
    /// Image `Small-Green-Check-Mark`.
    static let smallGreenCheckMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Small-Green-Check-Mark")
    /// Image `Small-Scan-Material`.
    static let smallScanMaterial = Rswift.ImageResource(bundle: R.hostingBundle, name: "Small-Scan-Material")
    /// Image `Stacked-Horizontal`.
    static let stackedHorizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stacked-Horizontal")
    /// Image `Stacked-Offset`.
    static let stackedOffset = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stacked-Offset")
    /// Image `Stacked-Vertical`.
    static let stackedVertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stacked-Vertical")
    /// Image `Tools-Contractor`.
    static let toolsContractor = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tools-Contractor")
    /// Image `Tools-Free`.
    static let toolsFree = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tools-Free")
    /// Image `Up-Arrow-Orange`.
    static let upArrowOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Up-Arrow-Orange")
    /// Image `White-Point-Right-Arrow`.
    static let whitePointRightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "White-Point-Right-Arrow")
    /// Image `envisage-free`.
    static let envisageFree = Rswift.ImageResource(bundle: R.hostingBundle, name: "envisage-free")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Cancel-Scan", bundle: ..., traitCollection: ...)`
    static func arCancelScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arCancelScan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Close-Modal", bundle: ..., traitCollection: ...)`
    static func arCloseModal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arCloseModal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Grout-Minus", bundle: ..., traitCollection: ...)`
    static func arGroutMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arGroutMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Grout-Plus", bundle: ..., traitCollection: ...)`
    static func arGroutPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arGroutPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Scan", bundle: ..., traitCollection: ...)`
    static func arScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arScan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Scan-Barcode", bundle: ..., traitCollection: ...)`
    static func arScanBarcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arScanBarcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Search-Grey", bundle: ..., traitCollection: ...)`
    static func arSearchGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arSearchGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Style-Close-Menu", bundle: ..., traitCollection: ...)`
    static func arStyleCloseMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arStyleCloseMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Style-Grout", bundle: ..., traitCollection: ...)`
    static func arStyleGrout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arStyleGrout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Style-Layout", bundle: ..., traitCollection: ...)`
    static func arStyleLayout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arStyleLayout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Style-Materials", bundle: ..., traitCollection: ...)`
    static func arStyleMaterials(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arStyleMaterials, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AR-Style-Menu", bundle: ..., traitCollection: ...)`
    static func arStyleMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arStyleMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Account", bundle: ..., traitCollection: ...)`
    static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Account-Active", bundle: ..., traitCollection: ...)`
    static func accountActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add-Material-Space-ProjectDetailScreen", bundle: ..., traitCollection: ...)`
    static func addMaterialSpaceProjectDetailScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addMaterialSpaceProjectDetailScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add-Note-Orange", bundle: ..., traitCollection: ...)`
    static func addNoteOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addNoteOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Apple-Icon", bundle: ..., traitCollection: ...)`
    static func appleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Back-Arrow-Green", bundle: ..., traitCollection: ...)`
    static func backArrowGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrowGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Basket-Weave", bundle: ..., traitCollection: ...)`
    static func basketWeave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.basketWeave, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Brick-90-Degree", bundle: ..., traitCollection: ...)`
    static func brick90Degree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brick90Degree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cross-Hatch", bundle: ..., traitCollection: ...)`
    static func crossHatch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossHatch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Example-House-1", bundle: ..., traitCollection: ...)`
    static func exampleHouse1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exampleHouse1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Example-House-2", bundle: ..., traitCollection: ...)`
    static func exampleHouse2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exampleHouse2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Facebook-Icon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorite-Not-Selected-Large", bundle: ..., traitCollection: ...)`
    static func favoriteNotSelectedLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteNotSelectedLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorite-Not-Selected-Small", bundle: ..., traitCollection: ...)`
    static func favoriteNotSelectedSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteNotSelectedSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorite-Selected-Large", bundle: ..., traitCollection: ...)`
    static func favoriteSelectedLarge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteSelectedLarge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorite-Selected-Small", bundle: ..., traitCollection: ...)`
    static func favoriteSelectedSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteSelectedSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Google-Icon", bundle: ..., traitCollection: ...)`
    static func googleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Green-Check-Mark", bundle: ..., traitCollection: ...)`
    static func greenCheckMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCheckMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Grey-Close", bundle: ..., traitCollection: ...)`
    static func greyClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Grey-Point-Down-Arrow", bundle: ..., traitCollection: ...)`
    static func greyPointDownArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyPointDownArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Grey-Point-Right-Arrow", bundle: ..., traitCollection: ...)`
    static func greyPointRightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyPointRightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Hamburger-Menu", bundle: ..., traitCollection: ...)`
    static func hamburgerMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hamburgerMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Hand-DIY", bundle: ..., traitCollection: ...)`
    static func handDIY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.handDIY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Hat-Contractor-Pro", bundle: ..., traitCollection: ...)`
    static func hatContractorPro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hatContractorPro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Herring-Bone", bundle: ..., traitCollection: ...)`
    static func herringBone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.herringBone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Herring-Bone-90-Degree", bundle: ..., traitCollection: ...)`
    static func herringBone90Degree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.herringBone90Degree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Hide-Password", bundle: ..., traitCollection: ...)`
    static func hidePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hidePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home-Active", bundle: ..., traitCollection: ...)`
    static func homeActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Materials", bundle: ..., traitCollection: ...)`
    static func materials(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materials, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Materials-Active", bundle: ..., traitCollection: ...)`
    static func materialsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materialsActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Minus-Orange", bundle: ..., traitCollection: ...)`
    static func minusOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "More-Detail-Screens", bundle: ..., traitCollection: ...)`
    static func moreDetailScreens(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreDetailScreens, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "More-Home", bundle: ..., traitCollection: ...)`
    static func moreHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Orange-Plus-Home", bundle: ..., traitCollection: ...)`
    static func orangePlusHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangePlusHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Orange-Plus-Project-Screen", bundle: ..., traitCollection: ...)`
    static func orangePlusProjectScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangePlusProjectScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Order-Button-Shopping-Cart", bundle: ..., traitCollection: ...)`
    static func orderButtonShoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderButtonShoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus-Orange", bundle: ..., traitCollection: ...)`
    static func plusOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Projects", bundle: ..., traitCollection: ...)`
    static func projects(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projects, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Projects-Active", bundle: ..., traitCollection: ...)`
    static func projectsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.projectsActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Running-Board", bundle: ..., traitCollection: ...)`
    static func runningBoard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.runningBoard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Scan-Home", bundle: ..., traitCollection: ...)`
    static func scanHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shopping-Cart", bundle: ..., traitCollection: ...)`
    static func shoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Show-Password", bundle: ..., traitCollection: ...)`
    static func showPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showPassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Small-Green-Check-Mark", bundle: ..., traitCollection: ...)`
    static func smallGreenCheckMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallGreenCheckMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Small-Scan-Material", bundle: ..., traitCollection: ...)`
    static func smallScanMaterial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallScanMaterial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Stacked-Horizontal", bundle: ..., traitCollection: ...)`
    static func stackedHorizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stackedHorizontal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Stacked-Offset", bundle: ..., traitCollection: ...)`
    static func stackedOffset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stackedOffset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Stacked-Vertical", bundle: ..., traitCollection: ...)`
    static func stackedVertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stackedVertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tools-Contractor", bundle: ..., traitCollection: ...)`
    static func toolsContractor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolsContractor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tools-Free", bundle: ..., traitCollection: ...)`
    static func toolsFree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolsFree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Up-Arrow-Orange", bundle: ..., traitCollection: ...)`
    static func upArrowOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upArrowOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "White-Point-Right-Arrow", bundle: ..., traitCollection: ...)`
    static func whitePointRightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whitePointRightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "envisage-free", bundle: ..., traitCollection: ...)`
    static func envisageFree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.envisageFree, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `LineTextView`.
    static let lineTextView = _R.nib._LineTextView()
    /// Nib `LoginOptionCollectionViewCell`.
    static let loginOptionCollectionViewCell = _R.nib._LoginOptionCollectionViewCell()
    /// Nib `MenuTableViewCell`.
    static let menuTableViewCell = _R.nib._MenuTableViewCell()
    /// Nib `PreviewCollectionViewCell`.
    static let previewCollectionViewCell = _R.nib._PreviewCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LineTextView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lineTextView) instead")
    static func lineTextView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lineTextView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginOptionCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginOptionCollectionViewCell) instead")
    static func loginOptionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginOptionCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTableViewCell) instead")
    static func menuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PreviewCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.previewCollectionViewCell) instead")
    static func previewCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewCollectionViewCell)
    }
    #endif

    static func lineTextView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LineTextView? {
      return R.nib.lineTextView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LineTextView
    }

    static func loginOptionCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoginOptionCollectionViewCell? {
      return R.nib.loginOptionCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginOptionCollectionViewCell
    }

    static func menuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
      return R.nib.menuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
    }

    static func previewCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewCollectionViewCell? {
      return R.nib.previewCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `LoginOptionCollectionViewCell`.
    static let loginOptionCollectionViewCell: Rswift.ReuseIdentifier<LoginOptionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LoginOptionCollectionViewCell")
    /// Reuse identifier `MenuTableViewCell`.
    static let menuTableViewCell: Rswift.ReuseIdentifier<MenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuTableViewCell")
    /// Reuse identifier `PreviewCollectionViewCell`.
    static let previewCollectionViewCell: Rswift.ReuseIdentifier<PreviewCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PreviewCollectionViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 43 localization keys.
    struct localizable {
      /// Value: Account
      static let accountTitle = Rswift.StringResource(key: "account.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AccountViewController
      static let accountIdentifier = Rswift.StringResource(key: "account.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AddMaterialViewController
      static let addMaterialIdentifier = Rswift.StringResource(key: "addMaterial.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: AddProjectViewController
      static let addProjectIdentifier = Rswift.StringResource(key: "addProject.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate AccountViewController
      static let accountFatalError = Rswift.StringResource(key: "account.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate AddMaterialViewController
      static let addMaterialFatalError = Rswift.StringResource(key: "addMaterial.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate AddProjectViewController
      static let addProjectFatalError = Rswift.StringResource(key: "addProject.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate ForgotPasswordViewController
      static let forgotPasswordFatalError = Rswift.StringResource(key: "forgotPassword.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate ForgotPasswordViewController
      static let resetPasswordFatalError = Rswift.StringResource(key: "resetPassword.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate HomeViewController
      static let homeFatalError = Rswift.StringResource(key: "home.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate LoginViewController
      static let loginFatalError = Rswift.StringResource(key: "login.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate MaterialListViewController
      static let materialListFatalError = Rswift.StringResource(key: "materialList.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate MenuTabBarController
      static let tabMenuFatalError = Rswift.StringResource(key: "tabMenu.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate MenuViewController
      static let menuFatalError = Rswift.StringResource(key: "menu.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate PreviewViewController
      static let previewFatalError = Rswift.StringResource(key: "preview.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate ProjectListViewController
      static let projectListFatalError = Rswift.StringResource(key: "projectList.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate SignUpViewController
      static let signUpFatalError = Rswift.StringResource(key: "signUp.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate SpaceARViewController
      static let spaceARFatalError = Rswift.StringResource(key: "spaceAR.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate StartViewController
      static let startFatalError = Rswift.StringResource(key: "start.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate TermsViewController
      static let termsFatalError = Rswift.StringResource(key: "terms.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter a valid email and try again
      static let validationErrorValidationEmailMessage = Rswift.StringResource(key: "validation.error.validation.email.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter a valid phone number and try again
      static let validationErrorValidationPhoneMessage = Rswift.StringResource(key: "validation.error.validation.phone.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ForgotPasswordViewController
      static let forgotPasswordIdentifier = Rswift.StringResource(key: "forgotPassword.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ForgotPasswordViewController
      static let resetPasswordIdentifier = Rswift.StringResource(key: "resetPassword.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Home
      static let homeTitle = Rswift.StringResource(key: "home.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HomeViewController
      static let homeIdentifier = Rswift.StringResource(key: "home.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Email
      static let validationErrorValidationEmailTitle = Rswift.StringResource(key: "validation.error.validation.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Password
      static let validationErrorValidationPasswordTitle = Rswift.StringResource(key: "validation.error.validation.password.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Phone Number
      static let validationErrorValidationPhoneTitle = Rswift.StringResource(key: "validation.error.validation.phone.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LoginViewController
      static let loginIdentifier = Rswift.StringResource(key: "login.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MaterialListViewController
      static let materialListIdentifier = Rswift.StringResource(key: "materialList.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Materials
      static let materialListTitle = Rswift.StringResource(key: "materialList.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MenuTabBarController
      static let tabMenuIdentifier = Rswift.StringResource(key: "tabMenu.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MenuViewController
      static let menuIdentifier = Rswift.StringResource(key: "menu.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PreviewViewController
      static let previewIdentifier = Rswift.StringResource(key: "preview.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ProjectListViewController
      static let projectListIdentifier = Rswift.StringResource(key: "projectList.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Projects
      static let projectListTitle = Rswift.StringResource(key: "projectList.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SignUpViewController
      static let signUpIdentifier = Rswift.StringResource(key: "signUp.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SpaceARViewController
      static let spaceARIdentifier = Rswift.StringResource(key: "spaceAR.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: StartViewController
      static let startIdentifier = Rswift.StringResource(key: "start.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TermsViewController
      static let termsIdentifier = Rswift.StringResource(key: "terms.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your password must contain at least 8 characters including 1 uppercase letter, 1 number, and 1 symbol
      static let validationErrorValidationPasswordMessage = Rswift.StringResource(key: "validation.error.validation.password.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Account
      static func accountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account.title"
        }

        return NSLocalizedString("account.title", bundle: bundle, comment: "")
      }

      /// Value: AccountViewController
      static func accountIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account.identifier"
        }

        return NSLocalizedString("account.identifier", bundle: bundle, comment: "")
      }

      /// Value: AddMaterialViewController
      static func addMaterialIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addMaterial.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addMaterial.identifier"
        }

        return NSLocalizedString("addMaterial.identifier", bundle: bundle, comment: "")
      }

      /// Value: AddProjectViewController
      static func addProjectIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addProject.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addProject.identifier"
        }

        return NSLocalizedString("addProject.identifier", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate AccountViewController
      static func accountFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("account.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "account.fatalError"
        }

        return NSLocalizedString("account.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate AddMaterialViewController
      static func addMaterialFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addMaterial.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addMaterial.fatalError"
        }

        return NSLocalizedString("addMaterial.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate AddProjectViewController
      static func addProjectFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addProject.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addProject.fatalError"
        }

        return NSLocalizedString("addProject.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate ForgotPasswordViewController
      static func forgotPasswordFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgotPassword.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgotPassword.fatalError"
        }

        return NSLocalizedString("forgotPassword.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate ForgotPasswordViewController
      static func resetPasswordFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPassword.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPassword.fatalError"
        }

        return NSLocalizedString("resetPassword.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate HomeViewController
      static func homeFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.fatalError"
        }

        return NSLocalizedString("home.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate LoginViewController
      static func loginFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login.fatalError"
        }

        return NSLocalizedString("login.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate MaterialListViewController
      static func materialListFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("materialList.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "materialList.fatalError"
        }

        return NSLocalizedString("materialList.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate MenuTabBarController
      static func tabMenuFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabMenu.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabMenu.fatalError"
        }

        return NSLocalizedString("tabMenu.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate MenuViewController
      static func menuFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu.fatalError"
        }

        return NSLocalizedString("menu.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate PreviewViewController
      static func previewFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preview.fatalError"
        }

        return NSLocalizedString("preview.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate ProjectListViewController
      static func projectListFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projectList.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projectList.fatalError"
        }

        return NSLocalizedString("projectList.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate SignUpViewController
      static func signUpFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.fatalError"
        }

        return NSLocalizedString("signUp.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate SpaceARViewController
      static func spaceARFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spaceAR.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spaceAR.fatalError"
        }

        return NSLocalizedString("spaceAR.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate StartViewController
      static func startFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start.fatalError"
        }

        return NSLocalizedString("start.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate TermsViewController
      static func termsFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms.fatalError"
        }

        return NSLocalizedString("terms.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Enter a valid email and try again
      static func validationErrorValidationEmailMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.email.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.email.message"
        }

        return NSLocalizedString("validation.error.validation.email.message", bundle: bundle, comment: "")
      }

      /// Value: Enter a valid phone number and try again
      static func validationErrorValidationPhoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.phone.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.phone.message"
        }

        return NSLocalizedString("validation.error.validation.phone.message", bundle: bundle, comment: "")
      }

      /// Value: ForgotPasswordViewController
      static func forgotPasswordIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgotPassword.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgotPassword.identifier"
        }

        return NSLocalizedString("forgotPassword.identifier", bundle: bundle, comment: "")
      }

      /// Value: ForgotPasswordViewController
      static func resetPasswordIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPassword.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPassword.identifier"
        }

        return NSLocalizedString("resetPassword.identifier", bundle: bundle, comment: "")
      }

      /// Value: Home
      static func homeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.title"
        }

        return NSLocalizedString("home.title", bundle: bundle, comment: "")
      }

      /// Value: HomeViewController
      static func homeIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.identifier"
        }

        return NSLocalizedString("home.identifier", bundle: bundle, comment: "")
      }

      /// Value: Invalid Email
      static func validationErrorValidationEmailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.email.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.email.title"
        }

        return NSLocalizedString("validation.error.validation.email.title", bundle: bundle, comment: "")
      }

      /// Value: Invalid Password
      static func validationErrorValidationPasswordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.password.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.password.title"
        }

        return NSLocalizedString("validation.error.validation.password.title", bundle: bundle, comment: "")
      }

      /// Value: Invalid Phone Number
      static func validationErrorValidationPhoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.phone.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.phone.title"
        }

        return NSLocalizedString("validation.error.validation.phone.title", bundle: bundle, comment: "")
      }

      /// Value: LoginViewController
      static func loginIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login.identifier"
        }

        return NSLocalizedString("login.identifier", bundle: bundle, comment: "")
      }

      /// Value: MaterialListViewController
      static func materialListIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("materialList.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "materialList.identifier"
        }

        return NSLocalizedString("materialList.identifier", bundle: bundle, comment: "")
      }

      /// Value: Materials
      static func materialListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("materialList.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "materialList.title"
        }

        return NSLocalizedString("materialList.title", bundle: bundle, comment: "")
      }

      /// Value: MenuTabBarController
      static func tabMenuIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabMenu.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabMenu.identifier"
        }

        return NSLocalizedString("tabMenu.identifier", bundle: bundle, comment: "")
      }

      /// Value: MenuViewController
      static func menuIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu.identifier"
        }

        return NSLocalizedString("menu.identifier", bundle: bundle, comment: "")
      }

      /// Value: Ok
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// Value: PreviewViewController
      static func previewIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preview.identifier"
        }

        return NSLocalizedString("preview.identifier", bundle: bundle, comment: "")
      }

      /// Value: ProjectListViewController
      static func projectListIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projectList.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projectList.identifier"
        }

        return NSLocalizedString("projectList.identifier", bundle: bundle, comment: "")
      }

      /// Value: Projects
      static func projectListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("projectList.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "projectList.title"
        }

        return NSLocalizedString("projectList.title", bundle: bundle, comment: "")
      }

      /// Value: SignUpViewController
      static func signUpIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.identifier"
        }

        return NSLocalizedString("signUp.identifier", bundle: bundle, comment: "")
      }

      /// Value: SpaceARViewController
      static func spaceARIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spaceAR.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spaceAR.identifier"
        }

        return NSLocalizedString("spaceAR.identifier", bundle: bundle, comment: "")
      }

      /// Value: StartViewController
      static func startIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start.identifier"
        }

        return NSLocalizedString("start.identifier", bundle: bundle, comment: "")
      }

      /// Value: TermsViewController
      static func termsIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms.identifier"
        }

        return NSLocalizedString("terms.identifier", bundle: bundle, comment: "")
      }

      /// Value: Your password must contain at least 8 characters including 1 uppercase letter, 1 number, and 1 symbol
      static func validationErrorValidationPasswordMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.password.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.password.message"
        }

        return NSLocalizedString("validation.error.validation.password.message", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _LineTextView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LineTextView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LineTextView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LineTextView
      }

      fileprivate init() {}
    }

    struct _LoginOptionCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoginOptionCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "LoginOptionCollectionViewCell"
      let name = "LoginOptionCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoginOptionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginOptionCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _MenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "MenuTableViewCell"
      let name = "MenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
      }

      fileprivate init() {}
    }

    struct _PreviewCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PreviewCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PreviewCollectionViewCell"
      let name = "PreviewCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewCollectionViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try accountViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addProjectViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try forgotPasswordViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try materialListViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menuTabBarController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menuViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try previewViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try projectListViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try resetPasswordViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signUpViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try spaceARViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try startViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try termsViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct accountViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let accountViewController = StoryboardViewControllerResource<AccountViewController>(identifier: "AccountViewController")
      let bundle = R.hostingBundle
      let name = "AccountViewController"

      func accountViewController(_: Void = ()) -> AccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accountViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.accountViewController().accountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'AccountViewController' as 'AccountViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addProjectViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addProjectViewController = StoryboardViewControllerResource<AddProjectViewController>(identifier: "AddProjectViewController")
      let bundle = R.hostingBundle
      let name = "AddProjectViewController"

      func addProjectViewController(_: Void = ()) -> AddProjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addProjectViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'xmark' is used in storyboard 'AddProjectViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addProjectViewController().addProjectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addProjectViewController' could not be loaded from storyboard 'AddProjectViewController' as 'AddProjectViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct forgotPasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let name = "ForgotPasswordViewController"

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.backward' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.forgotPasswordViewController().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgotPasswordViewController' as 'ForgotPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "HomeViewController"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "line.3.horizontal") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'line.3.horizontal' is used in storyboard 'HomeViewController', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in storyboard 'HomeViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.homeViewController().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'HomeViewController' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "LoginViewController"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.loginViewController().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginViewController' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct materialListViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let materialListViewController = StoryboardViewControllerResource<MaterialListViewController>(identifier: "MaterialListViewController")
      let name = "MaterialListViewController"

      func materialListViewController(_: Void = ()) -> MaterialListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: materialListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.materialListViewController().materialListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'materialListViewController' could not be loaded from storyboard 'MaterialListViewController' as 'MaterialListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menuTabBarController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuTabBarController = StoryboardViewControllerResource<MenuTabBarController>(identifier: "MenuTabBarController")
      let name = "MenuTabBarController"

      func menuTabBarController(_: Void = ()) -> MenuTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuTabBarController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.menuTabBarController().menuTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuTabBarController' could not be loaded from storyboard 'MenuTabBarController' as 'MenuTabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menuViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "MenuViewController"

      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "line.3.horizontal") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'line.3.horizontal' is used in storyboard 'MenuViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.menuViewController().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'MenuViewController' as 'MenuViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct previewViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PreviewViewController"
      let previewViewController = StoryboardViewControllerResource<PreviewViewController>(identifier: "PreviewViewController")

      func previewViewController(_: Void = ()) -> PreviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: previewViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "envisage-free", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'envisage-free' is used in storyboard 'PreviewViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.previewViewController().previewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'previewViewController' could not be loaded from storyboard 'PreviewViewController' as 'PreviewViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct projectListViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProjectListViewController"
      let projectListViewController = StoryboardViewControllerResource<ProjectListViewController>(identifier: "ProjectListViewController")

      func projectListViewController(_: Void = ()) -> ProjectListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: projectListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.projectListViewController().projectListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'projectListViewController' could not be loaded from storyboard 'ProjectListViewController' as 'ProjectListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct resetPasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ResetPasswordViewController"
      let resetPasswordViewController = StoryboardViewControllerResource<ResetPasswordViewController>(identifier: "ResetPasswordViewController")

      func resetPasswordViewController(_: Void = ()) -> ResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.resetPasswordViewController().resetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordViewController' could not be loaded from storyboard 'ResetPasswordViewController' as 'ResetPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signUpViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUpViewController"
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Example-House-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Example-House-2' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.backward' is used in storyboard 'SignUpViewController', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "envisage-free", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'envisage-free' is used in storyboard 'SignUpViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.signUpViewController().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'SignUpViewController' as 'SignUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct spaceARViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpaceARViewController"
      let spaceARViewController = StoryboardViewControllerResource<SpaceARViewController>(identifier: "SpaceARViewController")

      func spaceARViewController(_: Void = ()) -> SpaceARViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spaceARViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.spaceARViewController().spaceARViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spaceARViewController' could not be loaded from storyboard 'SpaceARViewController' as 'SpaceARViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct startViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartViewController"
      let startViewController = StoryboardViewControllerResource<StartViewController>(identifier: "StartViewController")

      func startViewController(_: Void = ()) -> StartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.startViewController().startViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startViewController' could not be loaded from storyboard 'StartViewController' as 'StartViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct termsViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TermsViewController"
      let termsViewController = StoryboardViewControllerResource<TermsViewController>(identifier: "TermsViewController")

      func termsViewController(_: Void = ()) -> TermsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.termsViewController().termsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'TermsViewController' as 'TermsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
