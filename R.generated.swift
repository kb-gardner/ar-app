//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 13 storyboards.
  struct storyboard {
    /// Storyboard `AddProjectViewController`.
    static let addProjectViewController = _R.storyboard.addProjectViewController()
    /// Storyboard `ForgotPasswordViewController`.
    static let forgotPasswordViewController = _R.storyboard.forgotPasswordViewController()
    /// Storyboard `HomeViewController`.
    static let homeViewController = _R.storyboard.homeViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginViewController`.
    static let loginViewController = _R.storyboard.loginViewController()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MenuViewController`.
    static let menuViewController = _R.storyboard.menuViewController()
    /// Storyboard `PreviewViewController`.
    static let previewViewController = _R.storyboard.previewViewController()
    /// Storyboard `ResetPasswordViewController`.
    static let resetPasswordViewController = _R.storyboard.resetPasswordViewController()
    /// Storyboard `SignUpViewController`.
    static let signUpViewController = _R.storyboard.signUpViewController()
    /// Storyboard `SpaceARViewController`.
    static let spaceARViewController = _R.storyboard.spaceARViewController()
    /// Storyboard `StartViewController`.
    static let startViewController = _R.storyboard.startViewController()
    /// Storyboard `TermsViewController`.
    static let termsViewController = _R.storyboard.termsViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddProjectViewController", bundle: ...)`
    static func addProjectViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addProjectViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ForgotPasswordViewController", bundle: ...)`
    static func forgotPasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgotPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeViewController", bundle: ...)`
    static func homeViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginViewController", bundle: ...)`
    static func loginViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MenuViewController", bundle: ...)`
    static func menuViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PreviewViewController", bundle: ...)`
    static func previewViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.previewViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ResetPasswordViewController", bundle: ...)`
    static func resetPasswordViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.resetPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignUpViewController", bundle: ...)`
    static func signUpViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUpViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SpaceARViewController", bundle: ...)`
    static func spaceARViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.spaceARViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "StartViewController", bundle: ...)`
    static func startViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.startViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TermsViewController", bundle: ...)`
    static func termsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.termsViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `awsconfiguration.json`.
    static let awsconfigurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "awsconfiguration", pathExtension: "json")

    /// `bundle.url(forResource: "awsconfiguration", withExtension: "json")`
    static func awsconfigurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awsconfigurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `apple-icon`.
    static let appleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon")
    /// Image `facebook-icon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-icon")
    /// Image `google-icon`.
    static let googleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "google-icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple-icon", bundle: ..., traitCollection: ...)`
    static func appleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-icon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google-icon", bundle: ..., traitCollection: ...)`
    static func googleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `LineTextField`.
    static let lineTextField = _R.nib._LineTextField()
    /// Nib `LoginOptionCollectionViewCell`.
    static let loginOptionCollectionViewCell = _R.nib._LoginOptionCollectionViewCell()
    /// Nib `MenuTableViewCell`.
    static let menuTableViewCell = _R.nib._MenuTableViewCell()
    /// Nib `PreviewCollectionViewCell`.
    static let previewCollectionViewCell = _R.nib._PreviewCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LineTextField", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lineTextField) instead")
    static func lineTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lineTextField)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginOptionCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginOptionCollectionViewCell) instead")
    static func loginOptionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginOptionCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTableViewCell) instead")
    static func menuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PreviewCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.previewCollectionViewCell) instead")
    static func previewCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewCollectionViewCell)
    }
    #endif

    static func lineTextField(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LineTextView? {
      return R.nib.lineTextField.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LineTextView
    }

    static func loginOptionCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoginOptionCollectionViewCell? {
      return R.nib.loginOptionCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginOptionCollectionViewCell
    }

    static func menuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
      return R.nib.menuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
    }

    static func previewCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewCollectionViewCell? {
      return R.nib.previewCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `LoginOptionCollectionViewCell`.
    static let loginOptionCollectionViewCell: Rswift.ReuseIdentifier<LoginOptionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LoginOptionCollectionViewCell")
    /// Reuse identifier `MenuTableViewCell`.
    static let menuTableViewCell: Rswift.ReuseIdentifier<MenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuTableViewCell")
    /// Reuse identifier `PreviewCollectionViewCell`.
    static let previewCollectionViewCell: Rswift.ReuseIdentifier<PreviewCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PreviewCollectionViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 29 localization keys.
    struct localizable {
      /// Value: AddProjectViewController
      static let addProjectIdentifier = Rswift.StringResource(key: "addProject.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate AddProjectViewController
      static let addProjectFatalError = Rswift.StringResource(key: "addProject.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate ForgotPasswordViewController
      static let forgotPasswordFatalError = Rswift.StringResource(key: "forgotPassword.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate ForgotPasswordViewController
      static let resetPasswordFatalError = Rswift.StringResource(key: "resetPassword.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate HomeViewController
      static let homeFatalError = Rswift.StringResource(key: "home.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate LoginViewController
      static let loginFatalError = Rswift.StringResource(key: "login.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate MenuViewController
      static let menuFatalError = Rswift.StringResource(key: "menu.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate PreviewViewController
      static let previewFatalError = Rswift.StringResource(key: "preview.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate SignUpViewController
      static let signUpFatalError = Rswift.StringResource(key: "signUp.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate SpaceARViewController
      static let spaceARFatalError = Rswift.StringResource(key: "spaceAR.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate StartViewController
      static let startFatalError = Rswift.StringResource(key: "start.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not instantiate TermsViewController
      static let termsFatalError = Rswift.StringResource(key: "terms.fatalError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter a valid email and try again
      static let validationErrorValidationEmailMessage = Rswift.StringResource(key: "validation.error.validation.email.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter a valid phone number and try again
      static let validationErrorValidationPhoneMessage = Rswift.StringResource(key: "validation.error.validation.phone.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ForgotPasswordViewController
      static let forgotPasswordIdentifier = Rswift.StringResource(key: "forgotPassword.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ForgotPasswordViewController
      static let resetPasswordIdentifier = Rswift.StringResource(key: "resetPassword.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HomeViewController
      static let homeIdentifier = Rswift.StringResource(key: "home.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Email
      static let validationErrorValidationEmailTitle = Rswift.StringResource(key: "validation.error.validation.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Password
      static let validationErrorValidationPasswordTitle = Rswift.StringResource(key: "validation.error.validation.password.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Phone Number
      static let validationErrorValidationPhoneTitle = Rswift.StringResource(key: "validation.error.validation.phone.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LoginViewController
      static let loginIdentifier = Rswift.StringResource(key: "login.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: MenuViewController
      static let menuIdentifier = Rswift.StringResource(key: "menu.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PreviewViewController
      static let previewIdentifier = Rswift.StringResource(key: "preview.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SignUpViewController
      static let signUpIdentifier = Rswift.StringResource(key: "signUp.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SpaceARViewController
      static let spaceARIdentifier = Rswift.StringResource(key: "spaceAR.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: StartViewController
      static let startIdentifier = Rswift.StringResource(key: "start.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TermsViewController
      static let termsIdentifier = Rswift.StringResource(key: "terms.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your password must contain at least 8 characters including 1 uppercase letter, 1 number, and 1 symbol
      static let validationErrorValidationPasswordMessage = Rswift.StringResource(key: "validation.error.validation.password.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: AddProjectViewController
      static func addProjectIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addProject.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addProject.identifier"
        }

        return NSLocalizedString("addProject.identifier", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate AddProjectViewController
      static func addProjectFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addProject.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addProject.fatalError"
        }

        return NSLocalizedString("addProject.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate ForgotPasswordViewController
      static func forgotPasswordFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgotPassword.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgotPassword.fatalError"
        }

        return NSLocalizedString("forgotPassword.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate ForgotPasswordViewController
      static func resetPasswordFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPassword.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPassword.fatalError"
        }

        return NSLocalizedString("resetPassword.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate HomeViewController
      static func homeFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.fatalError"
        }

        return NSLocalizedString("home.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate LoginViewController
      static func loginFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login.fatalError"
        }

        return NSLocalizedString("login.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate MenuViewController
      static func menuFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu.fatalError"
        }

        return NSLocalizedString("menu.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate PreviewViewController
      static func previewFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preview.fatalError"
        }

        return NSLocalizedString("preview.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate SignUpViewController
      static func signUpFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.fatalError"
        }

        return NSLocalizedString("signUp.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate SpaceARViewController
      static func spaceARFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spaceAR.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spaceAR.fatalError"
        }

        return NSLocalizedString("spaceAR.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate StartViewController
      static func startFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start.fatalError"
        }

        return NSLocalizedString("start.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Could not instantiate TermsViewController
      static func termsFatalError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.fatalError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms.fatalError"
        }

        return NSLocalizedString("terms.fatalError", bundle: bundle, comment: "")
      }

      /// Value: Enter a valid email and try again
      static func validationErrorValidationEmailMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.email.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.email.message"
        }

        return NSLocalizedString("validation.error.validation.email.message", bundle: bundle, comment: "")
      }

      /// Value: Enter a valid phone number and try again
      static func validationErrorValidationPhoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.phone.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.phone.message"
        }

        return NSLocalizedString("validation.error.validation.phone.message", bundle: bundle, comment: "")
      }

      /// Value: ForgotPasswordViewController
      static func forgotPasswordIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgotPassword.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgotPassword.identifier"
        }

        return NSLocalizedString("forgotPassword.identifier", bundle: bundle, comment: "")
      }

      /// Value: ForgotPasswordViewController
      static func resetPasswordIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPassword.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPassword.identifier"
        }

        return NSLocalizedString("resetPassword.identifier", bundle: bundle, comment: "")
      }

      /// Value: HomeViewController
      static func homeIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.identifier"
        }

        return NSLocalizedString("home.identifier", bundle: bundle, comment: "")
      }

      /// Value: Invalid Email
      static func validationErrorValidationEmailTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.email.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.email.title"
        }

        return NSLocalizedString("validation.error.validation.email.title", bundle: bundle, comment: "")
      }

      /// Value: Invalid Password
      static func validationErrorValidationPasswordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.password.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.password.title"
        }

        return NSLocalizedString("validation.error.validation.password.title", bundle: bundle, comment: "")
      }

      /// Value: Invalid Phone Number
      static func validationErrorValidationPhoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.phone.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.phone.title"
        }

        return NSLocalizedString("validation.error.validation.phone.title", bundle: bundle, comment: "")
      }

      /// Value: LoginViewController
      static func loginIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login.identifier"
        }

        return NSLocalizedString("login.identifier", bundle: bundle, comment: "")
      }

      /// Value: MenuViewController
      static func menuIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu.identifier"
        }

        return NSLocalizedString("menu.identifier", bundle: bundle, comment: "")
      }

      /// Value: Ok
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// Value: PreviewViewController
      static func previewIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preview.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preview.identifier"
        }

        return NSLocalizedString("preview.identifier", bundle: bundle, comment: "")
      }

      /// Value: SignUpViewController
      static func signUpIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.identifier"
        }

        return NSLocalizedString("signUp.identifier", bundle: bundle, comment: "")
      }

      /// Value: SpaceARViewController
      static func spaceARIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spaceAR.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spaceAR.identifier"
        }

        return NSLocalizedString("spaceAR.identifier", bundle: bundle, comment: "")
      }

      /// Value: StartViewController
      static func startIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start.identifier"
        }

        return NSLocalizedString("start.identifier", bundle: bundle, comment: "")
      }

      /// Value: TermsViewController
      static func termsIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms.identifier"
        }

        return NSLocalizedString("terms.identifier", bundle: bundle, comment: "")
      }

      /// Value: Your password must contain at least 8 characters including 1 uppercase letter, 1 number, and 1 symbol
      static func validationErrorValidationPasswordMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation.error.validation.password.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation.error.validation.password.message"
        }

        return NSLocalizedString("validation.error.validation.password.message", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _LineTextField: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LineTextField"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LineTextView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LineTextView
      }

      fileprivate init() {}
    }

    struct _LoginOptionCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LoginOptionCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "LoginOptionCollectionViewCell"
      let name = "LoginOptionCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoginOptionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoginOptionCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _MenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuTableViewCell

      let bundle = R.hostingBundle
      let identifier = "MenuTableViewCell"
      let name = "MenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
      }

      fileprivate init() {}
    }

    struct _PreviewCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PreviewCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PreviewCollectionViewCell"
      let name = "PreviewCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewCollectionViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addProjectViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try forgotPasswordViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menuViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try previewViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try resetPasswordViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signUpViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try spaceARViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try startViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try termsViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addProjectViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addProjectViewController = StoryboardViewControllerResource<AddProjectViewController>(identifier: "AddProjectViewController")
      let bundle = R.hostingBundle
      let name = "AddProjectViewController"

      func addProjectViewController(_: Void = ()) -> AddProjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addProjectViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'xmark' is used in storyboard 'AddProjectViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addProjectViewController().addProjectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addProjectViewController' could not be loaded from storyboard 'AddProjectViewController' as 'AddProjectViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct forgotPasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let name = "ForgotPasswordViewController"

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.backward' is used in storyboard 'ForgotPasswordViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.forgotPasswordViewController().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgotPasswordViewController' as 'ForgotPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "HomeViewController"

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "line.3.horizontal") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'line.3.horizontal' is used in storyboard 'HomeViewController', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in storyboard 'HomeViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.homeViewController().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'HomeViewController' as 'HomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "LoginViewController"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.loginViewController().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginViewController' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menuViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "MenuViewController"

      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "line.3.horizontal") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'line.3.horizontal' is used in storyboard 'MenuViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.menuViewController().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'MenuViewController' as 'MenuViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct previewViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PreviewViewController"
      let previewViewController = StoryboardViewControllerResource<PreviewViewController>(identifier: "PreviewViewController")

      func previewViewController(_: Void = ()) -> PreviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: previewViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.previewViewController().previewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'previewViewController' could not be loaded from storyboard 'PreviewViewController' as 'PreviewViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct resetPasswordViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ResetPasswordViewController"
      let resetPasswordViewController = StoryboardViewControllerResource<ResetPasswordViewController>(identifier: "ResetPasswordViewController")

      func resetPasswordViewController(_: Void = ()) -> ResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.resetPasswordViewController().resetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordViewController' could not be loaded from storyboard 'ResetPasswordViewController' as 'ResetPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signUpViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUpViewController"
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.backward' is used in storyboard 'SignUpViewController', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.signUpViewController().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'SignUpViewController' as 'SignUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct spaceARViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SpaceARViewController"
      let spaceARViewController = StoryboardViewControllerResource<SpaceARViewController>(identifier: "SpaceARViewController")

      func spaceARViewController(_: Void = ()) -> SpaceARViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: spaceARViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.spaceARViewController().spaceARViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'spaceARViewController' could not be loaded from storyboard 'SpaceARViewController' as 'SpaceARViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct startViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartViewController"
      let startViewController = StoryboardViewControllerResource<StartViewController>(identifier: "StartViewController")

      func startViewController(_: Void = ()) -> StartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.startViewController().startViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startViewController' could not be loaded from storyboard 'StartViewController' as 'StartViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct termsViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TermsViewController"
      let termsViewController = StoryboardViewControllerResource<TermsViewController>(identifier: "TermsViewController")

      func termsViewController(_: Void = ()) -> TermsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.termsViewController().termsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsViewController' could not be loaded from storyboard 'TermsViewController' as 'TermsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
